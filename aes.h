/*==========================================================================================
||	
||	Copyright (C) 2013  Ravi Malik
||	
||	This program is free software; you can redistribute it and/or
||	modify it under the terms of the GNU General Public License
||	as published by the Free Software Foundation; either version 2
||	of the License, or (at your option) any later version.
||	
||	This program is distributed in the hope that it will be useful,
||	but WITHOUT ANY WARRANTY; without even the implied warranty of
||	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
||	GNU General Public License for more details.
||	
||	You should have received a copy of the GNU General Public License
||	along with this program; if not, write to the Free Software
||	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
||	
||
*==========================================================================================*/

/******************************************************************
*	Rijndael implemetation in C
*	AES-128
*	Symmetric Key Cryptography
*	
*	Implemented By: Ravi Malik
********************************************************************/

/*****************************************************
Standards used while coding...
1.Hexadecimal values to be encrypted are stored as unsigned chars.
2. The basic data structure involved is the block which is simply a 2-D array of data type unsigned char and size 4x4.
3. A block is used to represent both data and key.
******************************************************/

/***************************************************************
Interfaces to be used while using this module in external programs
1. struct block encrypt(struct block data,struct block round_key[11]);
2. struct block decrypt(struct block cipher,struct block round_key[11]);
***************************************************************/

/****************************************************************
Functional Interfaces for implementation within...
1. struct block sub_byte(struct block data,unsigned char *box);
2. struct block next_key(struct block prev_key,int round);
3. struct block mix_col(struct block data);
4. struct block add_round_key(struct block data,struct block key);
5. struct block shift_rows(struct block data);
6. struct block inv_shift_rows(struct block data);
****************************************************************/

#include<stdio.h>
#include"MixColumn.h"

/*############ Raw Data ###################*/

// Rijndael Substitution Box
unsigned char s_box[256] = 
{
   0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
   0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
   0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
   0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
   0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
   0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
   0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
   0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
   0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
   0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
   0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
   0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
   0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
   0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
   0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
   0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

// Rijndael Inverse Substitution Box
unsigned char inv_s_box[256] = 
{
   0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
   0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
   0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
   0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
   0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
   0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
   0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
   0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
   0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
   0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
   0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
   0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
   0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
   0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};


// RCon; used in key schedule....
unsigned char rcon[4][10]={
			{0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36},
			{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
			{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
			{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
		};

/* ############## Data Structures ################## */

// Defined in MixColumn.h and importing from there..

/* ############### Primitive Functions ################## */
void swap(unsigned char *a,unsigned char *b)
{	unsigned char temp;
	temp=*a;
	*a=*b;
	*b=temp;
}

void left_shift_row(char *a)
{	int i;	
	char c=*a;
	for(i=0;i<3;i++)
	{	swap(a+i,a+i+1);
	}
}

void right_shift_row(char *a)
{	int i;
	//char c=a[3];
	for(i=3;i>0;i--)
	{	swap(a+i,a+i-1);
	}
}

/* #################### Functions Corresponding to data ################## */

void print_block(struct block data)
{	int i,j;
	for(i=0;i<4;i++)
	{	for(j=0;j<4;j++)
		{	printf("%x\t",data.b[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}

struct block sub_byte(struct block data,unsigned char *box)
{	int i,j,c;
	for(i=0;i<4;i++)
	{	for(j=0;j<4;j++)
		{	c=(int)data.b[i][j];
			data.b[i][j]=*(box+c);
		}
	}
	return data;
}

struct block next_key(struct block prev_key,int round)
{	struct block next_key;	
	unsigned char last_col[4],first_col[4],rc[4];
	int i,j;
	for(i=0;i<4;i++)
	{	last_col[i]=prev_key.b[i][3];
		first_col[i]=prev_key.b[i][0];
		rc[i]=rcon[i][round];
	}
	for(i=0;i<3;i++)
	{	swap(&last_col[i],&last_col[i+1]);	
	}
	for(i=0;i<4;i++)
	{	last_col[i]=s_box[(int)last_col[i]];
	}
	for(i=0;i<4;i++)
	{	last_col[i]=first_col[i]^last_col[i]^rc[i];
	}
	for(i=0;i<4;i++)
	{	next_key.b[i][0]=last_col[i];
	}
	for(i=1;i<3;i++)
	{	for(j=0;j<4;j++)
		{	next_key.b[j][i]=next_key.b[j][i-1]^prev_key.b[j][i];
		}
	}
	for(j=0;j<4;j++)
	{	next_key.b[j][3]=next_key.b[j][2]^prev_key.b[j][3];
	}
	return next_key;
}


struct block add_round_key(struct block data,struct block key)
{	int i,j;
	for(i=0;i<4;i++)
	{	for(j=0;j<4;j++)
		{	data.b[i][j]=data.b[i][j]^key.b[i][j];	
		}
	}
	return data;
}

struct block shift_rows(struct block data)
{	int i,j;
	for(i=1;i<4;i++)
	{	for(j=0;j<i;j++)
		{	left_shift_row((char *)&data.b[i]);
		}
	}
	return data;
}

struct block inv_shift_rows(struct block data)
{	int i,j;
	for(i=1;i<4;i++)
	{	for(j=0;j<i;j++)
		{	right_shift_row((char *)&data.b[i]);
		}
	}
	return data;
}

/*################## Main Interface #################### */

struct block encrypt(struct block data,struct block round_key[11])
{	data=add_round_key(data,round_key[0]);
	int i;
	for(i=0;i<9;i++)
	{	data=sub_byte(data,(unsigned char *)&s_box);
		data=shift_rows(data);
		data=mix_column(data,mix_col_matrix);
		//key=next_key(key,i);
		data=add_round_key(data,round_key[i+1]);
	}
	data=sub_byte(data,(unsigned char *)&s_box);
	data=shift_rows(data);
	//key=next_key(key,9);
	data=add_round_key(data,round_key[10]);
	return data;
}

struct block decrypt(struct block cipher,struct block round_key[11])
{	/*struct block round_key[10];
	struct block temp_key;
	temp_key=key;*/	
	int i;
	/*for(i=0;i<10;i++)
	{	temp_key=next_key(temp_key,i);
		round_key[i]=temp_key;	
	}*/
	cipher=add_round_key(cipher,round_key[10]);
	//printf("Round 10:");
	//print_block(cipher);	
	for(i=9;i>0;i--)
	{	cipher=inv_shift_rows(cipher);
		cipher=sub_byte(cipher,(unsigned char *)&inv_s_box);
		cipher=add_round_key(cipher,round_key[i]);
		cipher=mix_column(cipher,inv_mix_col_matrix);	
	}
	cipher=inv_shift_rows(cipher);
	cipher=sub_byte(cipher,(unsigned char *)&inv_s_box);
	cipher=add_round_key(cipher,round_key[0]);
	return cipher;
}

void generate_round_keys(struct block key,struct block round_key[11])
{	struct block temp;	
	int i;	
	round_key[0]=key;
	temp=key;
	for(i=0;i<10;i++)
	{	temp=next_key(temp,i);
		round_key[i+1]=temp;
	}
}
